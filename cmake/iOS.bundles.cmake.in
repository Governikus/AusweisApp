function(SELF_GENERATED)
	function(FIND_BUNDLE _name _out_bundle _out_parent_dir)
		set(BUNDLE_DIRS "${CONFIG}-iphoneos;${CONFIG}-iphonesimulator;${CONFIG};UninstalledProducts;UninstalledProducts/iphoneos;UninstalledProducts/iphonesimulator")

		foreach(dir ${BUNDLE_DIRS})
			set(tmpDir @PROJECT_BINARY_DIR@/src/${dir})
			set(tmpBundleDir ${tmpDir}/${_name})
			if(EXISTS "${tmpBundleDir}")
				set(${_out_bundle} "${tmpBundleDir}" PARENT_SCOPE)
				set(${_out_parent_dir} "${tmpDir}" PARENT_SCOPE)
				break()
			endif()
		endforeach()
	endfunction()

	if(INTEGRATED_SDK)
		set(Bundle @PROJECT_NAME@2.framework)
	else()
		set(Bundle @PROJECT_NAME@.app)
	endif()

	FIND_BUNDLE(${Bundle} BundleDir ParentDir)

	if(BundleDir)
		message(STATUS "Use bundle: ${BundleDir}")
	else()
		message(FATAL_ERROR "Bundle directory does not exist")
	endif()

	if(INTEGRATED_SDK)
		configure_file("@PROJECT_SOURCE_DIR@/resources/packaging/ios/module.modulemap" "${BundleDir}/Modules/module.modulemap" COPYONLY)
		execute_process(COMMAND ${CMAKE_COMMAND} -E tar cf "@PROJECT_BINARY_DIR@/@CPACK_PACKAGE_FILE_NAME@.framework.zip" --format=zip ${Bundle} WORKING_DIRECTORY ${ParentDir})
	else()
		file(GLOB_RECURSE FILES RELATIVE "${CMAKE_BINARY_DIR}" *.dylib)
		foreach(f ${FILES})
			get_filename_component(filename_without_dir ${f} NAME)
			get_filename_component(filename_stripped ${filename_without_dir} NAME_WE)
			message(STATUS "Change @rpath of ${filename_without_dir}")
			execute_process(COMMAND install_name_tool -id @rpath/${filename_stripped} ${f})
		endforeach()

		execute_process(COMMAND ${CMAKE_COMMAND} -DIOS=${IOS} -P ${CMAKE_BINARY_DIR}/SignFiles.cmake WORKING_DIRECTORY ${BundleDir} RESULT_VARIABLE _result)
		if(NOT ${_result} EQUAL 0)
			message(FATAL_ERROR "Signing failed")
		endif()

		execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${BundleDir} Payload/${Bundle})
		execute_process(COMMAND ${CMAKE_COMMAND} -E tar cf "@PROJECT_BINARY_DIR@/@CPACK_PACKAGE_FILE_NAME@.ipa" --format=zip Payload)
		if(CMAKE_VERSION VERSION_LESS "3.17")
			execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory Payload)
		else()
			execute_process(COMMAND ${CMAKE_COMMAND} -E rm -r Payload)
		endif()
	endif()

	FIND_BUNDLE(${Bundle}.dSYM dSYM ParentDir)
	if(dSYM)
		message(STATUS "Use dSYM: ${dSYM}")
		execute_process(COMMAND ${CMAKE_COMMAND} -E tar cf "@PROJECT_BINARY_DIR@/@CPACK_PACKAGE_FILE_NAME@.dSYM.zip" --format=zip ${Bundle}.dSYM WORKING_DIRECTORY ${ParentDir})
	endif()

	if(ParentDir)
		file(GLOB SymbolMap "${ParentDir}/*.bcsymbolmap")
		if(SymbolMap)
			message(STATUS "Use bcsymbolmap: ${SymbolMap}")
			execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${SymbolMap} @PROJECT_BINARY_DIR@/@CPACK_PACKAGE_FILE_NAME@.bcsymbolmap)
		endif()
	endif()
endfunction()

function(XCODE_GENERATED)
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar cf "@PROJECT_BINARY_DIR@/@CPACK_PACKAGE_FILE_NAME@.xcarchive.zip" --format=zip @PROJECT_NAME@.xcarchive)
	if(INTEGRATED_SDK)
		message(FATAL_ERROR "Not supported")
	else()
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename @PROJECT_NAME@.ipa @CPACK_PACKAGE_FILE_NAME@.ipa)
	endif()
endfunction()

if(EXISTS "@CMAKE_BINARY_DIR@/@PROJECT_NAME@.xcarchive")
	XCODE_GENERATED()
else()
	SELF_GENERATED()
endif()
