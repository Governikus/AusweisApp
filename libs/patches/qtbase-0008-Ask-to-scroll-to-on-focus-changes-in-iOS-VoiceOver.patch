From 8fd4ba03ebb607a217794c1ce866cf312f7d0363 Mon Sep 17 00:00:00 2001
From: Jan Moeller <Jan.Moeller@governikus.de>
Date: Mon, 4 Dec 2023 13:06:12 +0100
Subject: Ask to scroll-to on focus changes in iOS VoiceOver

By adding the UIAccessibilityElementFocusedObserver, the QML Item that
received the focus from VoiceOver is tracked. In turn, the QUIView
will try to scroll the view to bring the newly focused Item into view.
This will enhance the a11y of Flickable/ListView based UI components.
The approach tries to find the first Item with the ScrollBar role and
calls the corresponding scroll action on it, assuming the Item will be
the most useful Item to have a proper attached a11y property.

Task-number: QTBUG-119724
Pick-to: 6.2 6.5 6.6 6.7
Change-Id: I7632a8dd320af7547b9d36e39f5dce7e266023a4
---
 .../platforms/ios/qiosplatformaccessibility.h |  6 ++
 .../ios/qiosplatformaccessibility.mm          | 38 +++++++
 src/plugins/platforms/ios/qioswindow.h        |  1 +
 src/plugins/platforms/ios/qioswindow.mm       |  5 +
 src/plugins/platforms/ios/quiview.h           |  1 +
 .../platforms/ios/quiview_accessibility.mm    | 99 +++++++++++++++++++
 6 files changed, 150 insertions(+)

diff --git x/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.h y/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.h
index 96efc663bac896adb44a80eb5953a57ec7d92381..b8e14c14d19a807824384d4b32cce0554752506f 100644
--- x/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.h
+++ y/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.h
@@ -10,6 +10,8 @@
 
 QT_BEGIN_NAMESPACE
 
+@class UIAccessibilityElementFocusedObserver;
+
 class QIOSPlatformAccessibility: public QPlatformAccessibility
 {
 public:
@@ -17,6 +19,10 @@ public:
     ~QIOSPlatformAccessibility();
 
     virtual void notifyAccessibilityUpdate(QAccessibleEvent *event);
+
+private:
+    UIAccessibilityElementFocusedObserver* const m_FocusObserver;
+
 };
 
 QT_END_NAMESPACE
diff --git x/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.mm y/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.mm
index eb18ee637eef978e8574593644652271896a2035..d79eb8203091c6b684758803c0d03b5a69e4bed7 100644
--- x/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.mm
+++ y/qtbase/src/plugins/platforms/ios/qiosplatformaccessibility.mm
@@ -11,7 +11,45 @@
 #include "qioswindow.h"
 #include "quiaccessibilityelement.h"
 
+@interface UIAccessibilityElementFocusedObserver : NSObject
+ - (instancetype) init;
+ - (void) receiveNotification: (NSNotification*) notification;
+@end
+
+@implementation UIAccessibilityElementFocusedObserver
+- (instancetype) init {
+    self = [super init];
+    if (!self)
+    {
+        return nil;
+    }
+
+    [[NSNotificationCenter defaultCenter]
+    addObserver:self
+    selector:@selector(receiveNotification:)
+    name:UIAccessibilityElementFocusedNotification
+    object:nil];
+
+    return self;
+}
+
+- (void)receiveNotification:(NSNotification*)notification {
+    const auto element = notification.userInfo[UIAccessibilityFocusedElementKey];
+    if (!element)
+        return;
+
+    foreach (QWindow *win, QGuiApplication::topLevelWindows()) {
+        if (win && win->handle()) {
+            QT_PREPEND_NAMESPACE(QIOSWindow) *window = static_cast<QT_PREPEND_NAMESPACE(QIOSWindow) *>(win->handle());
+            if (window->bringIntoView(element))
+                return;
+        }
+    }
+}
+@end
+
 QIOSPlatformAccessibility::QIOSPlatformAccessibility()
+    : m_FocusObserver([[UIAccessibilityElementFocusedObserver alloc] init])
 {}
 
 QIOSPlatformAccessibility::~QIOSPlatformAccessibility()
diff --git x/qtbase/src/plugins/platforms/ios/qioswindow.h y/qtbase/src/plugins/platforms/ios/qioswindow.h
index 02b21612023427a10fa5ad9333171108a7f7507e..366179bbccbcaa2188343b017ff2fe82e26c6002 100644
--- x/qtbase/src/plugins/platforms/ios/qioswindow.h
+++ y/qtbase/src/plugins/platforms/ios/qioswindow.h
@@ -51,6 +51,7 @@ public:
     WId winId() const override { return WId(m_view); }
 
     void clearAccessibleCache();
+    bool bringIntoView(id element);
 
     QSurfaceFormat format() const override;
 
diff --git x/qtbase/src/plugins/platforms/ios/qioswindow.mm y/qtbase/src/plugins/platforms/ios/qioswindow.mm
index 027752248c8f1f5127245cb24173e0ce30c91583..d265af21b6dc22b5c2410ab4dde49ee50b065407 100644
--- x/qtbase/src/plugins/platforms/ios/qioswindow.mm
+++ y/qtbase/src/plugins/platforms/ios/qioswindow.mm
@@ -405,6 +405,11 @@ void QIOSWindow::clearAccessibleCache()
     [quiview_cast(m_view) clearAccessibleCache];
 }
 
+bool QIOSWindow::bringIntoView(id element)
+{
+    return [quiview_cast(m_view) bringIntoView:element];
+}
+
 void QIOSWindow::requestUpdate()
 {
     static_cast<QIOSScreen *>(screen())->setUpdatesPaused(false);
diff --git x/qtbase/src/plugins/platforms/ios/quiview.h y/qtbase/src/plugins/platforms/ios/quiview.h
index 517258517295b0c08eade4e2246438c48541277c..bd4ea3875bfcc0034aa1fee279b02610df3351b8 100644
--- x/qtbase/src/plugins/platforms/ios/quiview.h
+++ y/qtbase/src/plugins/platforms/ios/quiview.h
@@ -26,6 +26,7 @@ QT_END_NAMESPACE
 
 @interface QUIView (Accessibility)
 - (void)clearAccessibleCache;
+- (bool)bringIntoView:(id) element;
 @end
 
 @interface UIView (QtHelpers)
diff --git x/qtbase/src/plugins/platforms/ios/quiview_accessibility.mm y/qtbase/src/plugins/platforms/ios/quiview_accessibility.mm
index 04e1f8cfb3098b9135703bc5e24e025288643111..8494ee893680a544d91138a3c9bad14bdcca388e 100644
--- x/qtbase/src/plugins/platforms/ios/quiview_accessibility.mm
+++ y/qtbase/src/plugins/platforms/ios/quiview_accessibility.mm
@@ -56,6 +56,105 @@
     [m_accessibleElements removeAllObjects];
 }
 
+bool performAction(QAccessibleInterface* iface, const QString& actionName)
+{
+    if (!iface || actionName.isEmpty())
+        return NO;
+
+    QAccessibleActionInterface *action = iface->actionInterface();
+    if (!action)
+        return NO;
+
+    const auto actionNames = action->actionNames();
+    if (actionNames.contains(actionName)) {
+        action->doAction(actionName);
+        return YES;
+    }
+
+    return NO;
+}
+
+bool performActionUpstream(QAccessibleInterface* iface, const QString& actionName)
+{
+    if (!iface)
+        return NO;
+
+    if (performAction(iface, actionName))
+        return YES;
+
+    return performActionUpstream(iface->parent(), actionName);
+}
+
+QAccessibleInterface* findScrollable(QAccessibleInterface* iface)
+{
+    if (!iface)
+        return nil;
+
+    if (iface->role() == QAccessible::ScrollBar)
+        return iface;
+
+    return nil;
+}
+
+QAccessibleInterface* findScrollableUpstream(QAccessibleInterface* iface)
+{
+    if (!iface)
+        return nil;
+
+    for (int i = 0; i < iface->childCount(); ++i) {
+        QAccessibleInterface* scrollable = findScrollable(iface->child(i));
+        if (scrollable)
+            return scrollable;
+    }
+
+    return findScrollableUpstream(iface->parent());
+}
+
+QString findMoveAction(const QRect& rect, const QRect& boundingRect)
+{
+    if (rect.x() + rect.width() > boundingRect.x() + boundingRect.width())
+        return QAccessibleActionInterface::scrollRightAction();
+    if (rect.x() < boundingRect.x())
+        return QAccessibleActionInterface::scrollLeftAction();
+    if (rect.y() + rect.height() > boundingRect.y() + boundingRect.height())
+        return QAccessibleActionInterface::scrollDownAction();
+    if (rect.y() < boundingRect.y())
+        return QAccessibleActionInterface::scrollUpAction();
+
+    return QString();
+}
+
+- (bool)bringIntoView:(id) element
+{
+    QMacAccessibilityElement* a11yElement = element;
+    if (!a11yElement)
+        return NO;
+
+    QAccessibleInterface* iface = QAccessible::accessibleInterface(a11yElement.axid);
+    if (!iface || iface->state().invisible)
+        return NO;
+
+    QAccessibleInterface* scrollable = findScrollable(iface);
+    if (!scrollable)
+        scrollable = findScrollableUpstream(iface->parent());
+
+    const QRect elementRect = iface->rect();
+
+    if (scrollable) {
+        const QString action = findMoveAction(elementRect, scrollable->rect());
+        return performAction(scrollable, action);
+    }
+
+    // Fallback to window to do SOMETHING
+    QWindow* window = iface->window();
+    if (!window)
+        return NO;
+
+    const QRect boundingRect = {window->x(), window->y(), window->width(), window->height()};
+    const QString action = findMoveAction(elementRect, boundingRect);
+    return performActionUpstream(iface, action);
+}
+
 // this is a container, returning yes here means the functions below will never be called
 - (BOOL)isAccessibilityElement
 {
