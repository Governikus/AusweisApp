From 7ed9d94f4cc26e6550d9a9d5c229a56384d68bc9 Mon Sep 17 00:00:00 2001
From: Santhosh Kumar <santhosh.kumar.selvaraj@qt.io>
Date: Wed, 25 Oct 2023 16:29:07 +0200
Subject: Fix binding loop issue in quick layout

The quick layout item cause binding loop issue when layout item size
were updated in-between polish.

This patch fixes this issue by avoiding size update during rearrange
and handle it during next polish.

Fixes: QTBUG-117899
Pick-to: 6.6 6.5
Change-Id: I1e318335ce8b5268d878b48a02a089d703bb90ad
---
 src/quicklayouts/qquicklayout.cpp       | 15 ++++++++-------
 src/quicklayouts/qquicklayout_p.h       |  3 ++-
 src/quicklayouts/qquicklinearlayout.cpp |  2 +-
 3 files changed, 11 insertions(+), 9 deletions(-)

diff --git x/qtdeclarative/src/quicklayouts/qquicklayout.cpp y/qtdeclarative/src/quicklayouts/qquicklayout.cpp
index fc2bcc130c..2e54949f1d 100644
--- x/qtdeclarative/src/quicklayouts/qquicklayout.cpp
+++ y/qtdeclarative/src/quicklayouts/qquicklayout.cpp
@@ -742,14 +742,15 @@ void QQuickLayoutPrivate::applySizeHints() const
     Q_Q(const QQuickLayout);
 
     QQuickLayout *that = const_cast<QQuickLayout*>(q);
+
     QQuickLayoutAttached *info = attachedLayoutObject(that, true);
+    const QSizeF minSize = q->sizeHint(Qt::MinimumSize);
+    const QSizeF maxSize = q->sizeHint(Qt::MaximumSize);
+    const QSizeF prefSize = q->sizeHint(Qt::PreferredSize);
+    info->setMinimumImplicitSize(minSize);
+    info->setMaximumImplicitSize(maxSize);
 
-    const QSizeF min = q->sizeHint(Qt::MinimumSize);
-    const QSizeF max = q->sizeHint(Qt::MaximumSize);
-    const QSizeF pref = q->sizeHint(Qt::PreferredSize);
-    info->setMinimumImplicitSize(min);
-    info->setMaximumImplicitSize(max);
-    that->setImplicitSize(pref.width(), pref.height());
+    that->setImplicitSize(prefSize.width(), prefSize.height());
 }
 
 QQuickLayout::QQuickLayout(QQuickLayoutPrivate &dd, QQuickItem *parent)
@@ -877,7 +878,7 @@ void QQuickLayout::ensureLayoutItemsUpdated(EnsureLayoutItemsUpdatedOptions opti
     const_cast<QQuickLayout*>(this)->updateLayoutItems();
 
     // make invalidate() return true
-    d->m_dirty = false;
+    d->m_dirty = (options & QQuickLayout::Rearrange) ? true : false;
 
     if (options & Recursive) {
         for (int i = 0; i < itemCount(); ++i) {
diff --git x/qtdeclarative/src/quicklayouts/qquicklayout_p.h y/qtdeclarative/src/quicklayouts/qquicklayout_p.h
index df9c4cad97..d0ccc4f185 100644
--- x/qtdeclarative/src/quicklayouts/qquicklayout_p.h
+++ y/qtdeclarative/src/quicklayouts/qquicklayout_p.h
@@ -49,7 +49,8 @@ public:
 
     enum EnsureLayoutItemsUpdatedOption {
         Recursive                     = 0b001,
-        ApplySizeHints                = 0b010
+        ApplySizeHints                = 0b010,
+        Rearrange                     = 0b100
     };
 
     Q_DECLARE_FLAGS(EnsureLayoutItemsUpdatedOptions, EnsureLayoutItemsUpdatedOption)
diff --git x/qtdeclarative/src/quicklayouts/qquicklinearlayout.cpp y/qtdeclarative/src/quicklayouts/qquicklinearlayout.cpp
index b34815e449..cbd15b4878 100644
--- x/qtdeclarative/src/quicklayouts/qquicklinearlayout.cpp
+++ y/qtdeclarative/src/quicklayouts/qquicklinearlayout.cpp
@@ -459,7 +459,7 @@ void QQuickGridLayoutBase::rearrange(const QSizeF &size)
 
     // Should normally not be needed, but there might be an incoming window resize event that we
     // will process before we process updatePolish()
-    ensureLayoutItemsUpdated(QQuickLayout::ApplySizeHints | QQuickLayout::Recursive);
+    ensureLayoutItemsUpdated(QQuickLayout::Rearrange | QQuickLayout::Recursive);
 
     d->m_rearranging = true;
     qCDebug(lcQuickLayouts) << objectName() << "QQuickGridLayoutBase::rearrange()" << size;
